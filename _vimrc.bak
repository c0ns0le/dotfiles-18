set nocompatible

call plug#begin()

" Languages
Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'mattn/emmet-vim'
Plug 'lunaru/vim-less'
Plug 'skammer/vim-css-color'
Plug 'hail2u/vim-css3-syntax'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets' 
Plug 'ianks/vim-tsx'
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'json'] }

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'arcticicestudio/nord-vim'
Plug 'altercation/vim-colors-solarized'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:Â¬,tab:>Â·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

if has('gui_running')
  set guifont=Hack:h11:cANSI:qDRAFT
  set guioptions -=T
  set guioptions -=m
  set guioptions -=r
  set guioptions -=l
  set guioptions -=L
  set guioptions -=R
endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e ~/dotfiles/.vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
set nocompatible

call plug#begin()

Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'arcticicestudio/nord-vim'
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ryanolsonx/ctrlp-projects.vim'
Plug 'ryanolsonx/ctrlp-npm.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'

call plug#end()

" CTRL P
let g:ctrlp_max_height = 30
let g:ctrlp_working_path_mode = 0 "'wa'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
let g:ctrlp_extensions = ['project', 'npm']

let g:ctrlp_npm_long_running_scripts = ['test']
let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']

" AIRLINE
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

let g:airline_skip_empty_sections = 1
let g:airline_section_y = ''
let g:airline_powerline_fonts = 1
let airline#extensions#whitespace#enabled = 0

color nord

set signcolumn=yes
set autoread
set autowrite
set cmdheight=1
set complete-=i "skip searching includes
set foldmethod=marker
set foldlevelstart=0
set clipboard=unnamed
set shortmess=a
set encoding=utf-8
set fillchars=vert:\|
set hidden
set history=1000
set nocompatible
set relativenumber
set backspace=indent,eol,start
set noshowmode
set showmatch
set nocursorline
set wildmenu
set lazyredraw
set laststatus=2
set noswapfile
set visualbell
set ruler
set scrolloff=2
set incsearch
set ignorecase
set smartcase
set hlsearch
set noshowcmd
set tabstop=2
set shiftwidth=2
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
set updatetime=100

set ttimeout

set ttimeoutlen=100

if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
  syntax on
endif

if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

let mapleader=" "

nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
nnoremap <leader>ss :source %<CR>

inoremap jj <esc>

nnoremap <leader>i :PlugInstall<cr>
nnoremap <leader>p :CtrlP<cr>
nnoremap <leader>b :CtrlPBuffer<cr>
nnoremap <leader>c :CtrlPProjects<cr>
nnoremap <leader>r :CtrlPNpm<cr>
nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader><space>  :nohlsearch<cr>
nnoremap <leader>q :q!<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gx :Gblame<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpull<CR>
nnoremap <leader>gP :Gpush<CR>
nnoremap <leader>f :PrettierAsync<CR>
nnoremap <leader>v :vsp<CR>
nnoremap <leader>h :sp<CR>

inoremap <c-s> <esc>:update<cr>
nnoremap <c-s> :update<cr>
nnoremap <leader>s :update<cr>
vmap <c-s> <esc>:w<cr>gv
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nmap <leader>tt :call <SID>SynStack()<CR>
inoremap <C-Space> <c-x><c-o>
nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return '? '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
"if has('gui_running')
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif

"set guifont=Hack:h11:cANSI:qDRAFT

"let mapleader=" "
"
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>ss :source %<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>

"" Section: Plugin Options {{{1
"" ---------------------
"" ---------------------
"let g:solarized_termcolors=256
"let g:solarized_underline=0
"
""let g:tsuquyomi_javascript_support = 1
"
"let g:gitgutter_sign_added = '|'
"let g:gitgutter_sign_modified = '|'
"let g:gitgutter_sign_modified_removed = '|'
"
"let g:statusline_type = 'emacs'
"let g:statusline_disabled = exists('g:loaded_airline') || exists('g:loaded_lightline')
"let g:statusline_short_mode = 0
"
"let g:statusline_colors = {
"  \ 'base16-ocean': {
"    \ 'insert': '#8FA1B3',
"    \ 'visual': '#B48EAD'
"    \ },
"  \ 'base16-tomorrow-night': {
"    \ 'normal': '#81A2BE',
"    \ 'insert': '#B5BD68',
"    \ 'visual': '#DE935F',
"    \ 'replace': '#81A2BE',
"    \ 'command': '#81A2BE'
"  \ }
"  \ }
"
"let g:terraform_fmt_on_save = 0
"
"if executable('tsserver')
"  au User lsp_setup call lsp#register_server({
"    \ 'name': 'tsserver',
"    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'tsserver', '--stdio']},
"    \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
"    \ 'whitelist': ['typescript'],
"    \ })
"endif
"
"" Lightline {{{2
"" ---------------------
"
"fu! GetCurrentGitBranch()
"  let branch = substitute(g:fugitive#head(7), 'feature/', '','')
"  if strlen(branch) > 0
"    return 'î‚  '.branch
"  else
"    return ''
"  endif
"endfu
"
"let g:lightline = {
"  \ 'colorscheme': 'molokai',
"  \ 'active': {
"  \   'left': [ [ 'mode', 'paste' ],
"  \             [ 'readonly', 'gitbranch', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'inactive': {
"  \   'left': [ [ 'paste' ],
"  \             [ 'readonly', 'filename', 'modified' ] ],
"  \   'right': []
"  \ },
"  \ 'component_function': {
"  \   'gitbranch': 'GetCurrentGitBranch'
"  \ },
"  \ 'mode_map': {
"  \   'n' : 'N',
"  \   'i' : 'I',
"  \   'R' : 'R',
"  \   'v' : 'V',
"  \   'V' : 'V',
"  \   "\<C-v>": 'V',
"  \   's' : 'S',
"  \   'S' : 'S',
"  \   "\<C-s>": 'S'
"  \   }
"  \ }
""
"" }}}2
"
"" Airline {{{2
"" ------------
"
"" let g:airline_mode_map = {
""     \ '__' : '-',
""     \ 'n'  : 'N',
""     \ 'i'  : 'I',
""     \ 'R'  : 'R',
""     \ 'c'  : 'C',
""     \ 'v'  : 'V',
""     \ 'V'  : 'V',
""     \ '' : 'V',
""     \ 's'  : 'S',
""     \ 'S'  : 'S',
""     \ '' : 'S',
""     \ }
"
"let g:airline_skip_empty_sections = 1
"let g:airline_section_y = ''
"let g:airline_powerline_fonts = 1
"let airline#extensions#whitespace#enabled = 0
"
"" ------------
"" }}}2
"
"" Ctrl-P {{{2
"" ----------
"
""let g:ctrlp_max_height = 30
"let g:ctrlp_working_path_mode = 0 "'wa'
""let g:ctrlp_match_window_reversed = 0
""set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
"let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
"let g:ctrlp_extensions = ['project', 'npm', 'gitswitchbranch']
"
"let g:ctrlp_npm_long_running_scripts = ['test']
"let g:ctrlp_npm_only_show_success_for_scripts = ['bundle']
"
"" ----------
"" }}}2
"
"" ---------------------
"" }}}1
"
"" Section: Options {{{1
"" ---------------------
"set signcolumn=yes
"set autoread
"set autowrite
"set cmdheight=1
"set complete-=i "skip searching includes
"set foldmethod=marker
"set foldlevelstart=0
"set clipboard=unnamed
"set shortmess=a
"set encoding=utf-8
"set fillchars=vert:\|
"set hidden
"set history=1000
"set nocompatible
"set relativenumber
"set backspace=indent,eol,start
"set noshowmode
"set showmatch
"set nocursorline
"set wildmenu
"set lazyredraw
"set laststatus=2
"set noswapfile
"set visualbell
"set ruler
"set scrolloff=2
"set incsearch
"set ignorecase
"set smartcase
"set hlsearch
"set noshowcmd
"set tabstop=2
"set shiftwidth=2
"set expandtab
"set listchars=eol:Â¬,tab:>Â·,trail:~,extends:>,precedes:<,space:-
"set updatetime=100
"
"set ttimeout
"
"set ttimeoutlen=100
"
"" Using vim features for fuzzy finding, etc
"set path+=**
"set wildignore+=*/node_modules/*,package-lock.json,*/dist/*
"
"if has('autocmd')
"  filetype plugin indent on
"endif
"
"if has('syntax') && !exists('g:syntax_on')
"  syntax enable
"  syntax on
"endif
"
"if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
"  runtime! macros/matchit.vim
"endif
"
"if has('gui_running')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h11:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"endif
"
"if has('nvim')
"  au GUIEnter * simalt ~x
"  set guifont=Hack:h10:cANSI:qDRAFT
"  set guioptions -=T
"  set guioptions -=m
"  set guioptions -=r
"  set guioptions -=l
"  set guioptions -=L
"  set guioptions -=R
"  "set term=xterm
"  set t_Co=256
"  "inoremap <Char-0x07F> <BS>
"  "nnoremap <Char-0x07F> <BS>
"endif
"" ---------------------
"" }}}1
"
"" Section: Commands {{{1
"" ---------------------
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"fun! SwitchToMinimalStatusLine()
"  let g:statusline_minimal = 1
"
"  call statusline#update()
"endf
"
"fun! SwitchToStandardStatusLine()
"  let g:statusline_minimal = 0
"
"  call statusline#update()
"endf
"
"function! <SID>SynStack()
"  if !exists("*synstack")
"    return
"  endif
"  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
"endfunc
"
"let mapleader=" "
"
"nnoremap <leader>ll :call SwitchToMinimalStatusLine()<cr>
"nnoremap <leader>ls :call SwitchToStandardStatusLine()<cr>
"nnoremap <leader>ev :e c:\users\ryolson\dotfiles\vim\_vimrc<CR>
"nnoremap <leader>ep :sp c:\users\ryolson\vimfiles\pack\my-packages\start\private.vim\plugin\private.vim<CR>
"nnoremap <leader>sv :source ~\_vimrc<CR>
"
"inoremap jj <esc>
"
"nnoremap <leader>i :PlugInstall<cr>
"nnoremap <leader>p :CtrlP<cr>
"nnoremap <leader>b :CtrlPBuffer<cr>
"nnoremap <leader>c :CtrlPProjects<cr>
"nnoremap <leader>r :CtrlPNpm<cr>
"nnoremap <leader>co :CtrlPSwitchGitBranch<cr>
"nnoremap <leader>n :NERDTreeToggle<CR>
"nnoremap <leader><space>  :nohlsearch<cr>
"nnoremap <leader>q :q!<cr>
"nnoremap <leader>gs :Gstatus<cr>
"nnoremap <leader>gc :Gcommit<CR>
"nnoremap <leader>gr :Gread<CR>
"nnoremap <leader>gw :Gwrite<CR>
"nnoremap <leader>gx :Gblame<CR>
"nnoremap <leader>gd :Gdiff<CR>
"nnoremap <leader>gp :Gpull<CR>
"nnoremap <leader>gP :Gpush<CR>
"nnoremap <leader>f :PrettierAsync<CR>
"nnoremap <leader>v :vsp<CR>
"nnoremap <leader>h :sp<CR>
"
"fun! CycleNumbering()
"  if exists('+relativenumber')
"    execute {
"      \ '00': 'set relativenumber   | set nonumber',
"      \ '01': 'set norelativenumber | set number',
"      \ '10': 'set norelativenumber | set nonumber',
"      \ '11': 'set norelativenumber | set number' }[&number . &relativenumber]
"  else
"    " no relative numbering, just toggle numbers on and off
"    set number!<cr>
"  endif
"endf
"
"nnoremap <silent> <leader>x :call CycleNumbering()<CR>
"
"inoremap <c-s> <esc>:update<cr>
"nnoremap <c-s> :update<cr>
"nnoremap <leader>s :update<cr>
"vmap <c-s> <esc>:w<cr>gv
"nnoremap <c-j> <c-w>j
"nnoremap <c-k> <c-w>k
"nnoremap <c-h> <c-w>h
"nnoremap <c-l> <c-w>l
"nmap <leader>tt :call <SID>SynStack()<CR>
"inoremap <C-Space> <c-x><c-o>
"nmap <silent> <F6> :Gstatus<cr>
"
"" ---------------------
"" }}}1
"
"" Section: Visual {{{1
"" --------------------
"set background=dark
"colorscheme solarized
"
"" Colorscheme Customizations {{{2
"" -------------------------------
"fu! GetHighlightValue(group, term)
"   let output = execute('hi ' . a:group)
"
"   return matchstr(output, a:term.'=\zs\S*')
"endfu
"
"fun! ColorschemeCustomizations()
"  if !exists('g:colors_name')
"    return
"  endif
"
"  if g:colors_name == 'dracula'
"    highlight! StatusLine guibg='#191A21' guifg='#F8F8F2' gui=NONE
"    highlight! StatusLineNC guibg='#191A21' guifg='#A8A8A4'
"    highlight! VertSplit guibg='#262833' guifg='#262833'
"  endif
"
"  if g:colors_name == 'seoul256'
"    highlight! StatusLine guifg='#DFDEDB' guibg='#3F3F3F' gui=bold
"  endif
"
"  if g:colors_name == 'summerfruit256'
"    highlight! LineNr guibg='#F8F8F8' guifg='#8A8A8A' gui=NONE
"    highlight! CursorLineNr guifg='#9DC0E6' guibg='#F8F8F8'
"    highlight! StatusLine guibg='#232323' guifg='#f3f3f3' gui=bold
"    highlight! StatusLineNC guibg='#353535' guifg='#f3f3f3'
"    highlight! VertSplit guifg='#F8F8F8' guibg='#F8F8F8'
"    highlight! EndOfBuffer guifg='#000000' guibg='#ffffff'
"    highlight! NonText guifg='#000000' guibg='#ffffff'
"  endif
"
"  if g:colors_name == 'solarized'
"    highlight typescriptSource guifg='#d33682'
"    if &background == 'light'
"      highlight CursorLine guibg='#FDF6E3'
"      highlight CursorLineNr guibg='#FDF6E3' guifg='#657B83'
"      highlight StatusLine guifg='#EFE8D5' guibg='#657B83'
"      highlight StatusLineNC guifg='#DDD6C7' guibg='#657B83'
"      highlight VertSplit guifg='#FDF6E3' guibg='#FDF6E3'
"    else
"      highlight CursorLineNr guibg='#063642' guifg='#586E75'
"      highlight StatusLine guifg='#063642' guibg='#6B8686'
"      highlight StatusLineNC guifg='#042730' guibg='#5F696B'
"    endif
"  else
"    let specialColor = GetHighlightValue('Keyword', 'guifg')
"
"    if specialColor != ''
"      exe "highlight! typescriptSource guifg='".specialColor."'"
"    else
"      exe "highlight! link typescriptSource Statement"
"    endif
"  endif
"
"  if g:colors_name == 'zenburn'
"    highlight! LineNr guibg='#3F3F3F' guifg='#90907E'
"    highlight! CursorLineNr guibg='#353535' guifg='#9E8F68'
"
"    let g:gitgutter_override_sign_column_highlight = 0
"    highlight! SignColumn guibg='#3F3F3F'
"    highlight! GitGutterAdd guifg='#87AE86'
"    highlight! GitGutterChange guifg='#FFFB9D'
"    highlight! GitGutterDelete guifg='#CC9393'
"    highlight! GitGutterChangeDelete guifg='#FFFB9D'
"    highlight! Label gui=NONE guifg='#dfcfaf'
"    highlight! VertSplit guifg='#353A37' guibg='#353A37'
"  else
"    let g:gitgutter_override_sign_column_highlight = 1
"  endif
"
"  if g:colors_name == 'monokai'
"      highlight! CursorLine guibg='#272822'
"      highlight! CursorLineNr guibg='#39392F' guifg='#90907E'
"      highlight! LineNr guibg='#272822' guifg='#90907E'
"      highlight! StatusLine guibg='#ABB1BA' guifg='#404040' gui=bold
"      highlight! StatusLineNC guibg='#ABB1BA' guifg='#636363'
"      "set numberwidth=7
"  else
"    "set numberwidth=4
"  endif
"
"  if g:colors_name == '256_noir'
"    highlight String guifg='#81A2BE'
"    highlight Number guifg='#d33682'
"  endif
"
"  if g:colors_name == 'base16-tomorrow-night'
"    highlight! CursorLine guibg='#1D1F21'
"    highlight! LineNr guibg='#1D1F21' guifg='#969896'
"    highlight! CursorLineNr guibg='#282A2E' guifg='#969896'
"    highlight! IncSearch guibg='#515C6A' guifg='#C5C8C6'
"    highlight! Search guibg='#603316' guifg='#C5C8C6' gui=NONE
"  endif
"
"  if g:colors_name == 'base16-oceanicnext'
"    highlight! Statement gui=NONE
"  endif
"
"  if g:colors_name == 'Tomorrow-Night-Blue'
"    highlight! StatusLine guifg='#002047' guibg='#bbdaff'
"    highlight! StatusLineNC guifg='#002047' guibg='#748699'
"    highlight! CursorLineNr guifg='#bbdaff'
"    highlight! VertSplit guibg='#002149' guifg='#002149'
"  endif
"
"  if g:colors_name == 'PaperColor'
"    highlight! StatusLine guifg='#333333' guibg='#fefefe'
"    highlight! StatusLineNC guifg='#333333' guibg='#fefefe'
"  endif
"endf
"
"augroup colorscheme_customizations
"  autocmd!
"  autocmd ColorScheme * call ColorschemeCustomizations()
"augroup END
"
"call ColorschemeCustomizations()
"
"" -------------------------------
"" }}}2
"
"" --------------------
"" }}}1
"
"" Section: Status Line {{{1
"" --------------------
"let g:statusline_current = 'normal'
"
"function! SL(function)
"  if exists('*'.a:function)
"    return call(a:function,[])
"  else
"    return ''
"  endif
"endfunction
"
"function! NormalStatusline()
"  set statusline=\ %t\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'normal'
"endfunction
"
"function! MoreStatusline()
"  set statusline=\ %f\ %m%r%w%{SL('fugitive#statusline')}\ %y
"  let g:statusline_current = 'more'
"endfunction
"
"function! SetStatusline(initial)
"  if a:initial
"    call NormalStatusline()
"  else
"    if g:statusline_current == 'normal'
"      call MoreStatusline()
"    elseif g:statusline_current == 'more'
"      call NormalStatusline()
"    endif
"  endif
"endfunction
"
":call SetStatusline(1)
"
"nnoremap <leader>l :call SetStatusline(0)<cr>
"
"" }}}1
"
"" Section: Autocommands {{{1
"" --------------------------
"
"function! SetTitleFromCwd()
"  let cwdparts = split(getcwd(), '\')
"  let dir = cwdparts[len(cwdparts) - 1]
"  let &titlestring = dir.' - '.expand('%t')
"endfunction
"
"if has("autocmd")
"  augroup FTOptions
"    autocmd!
"    autocmd Syntax typescript,javascript,css setlocal foldmethod=manual
""    autocmd Syntax typescript,javascript,css setlocal foldlevel=1
"    "autocmd Syntax typescript,javascript,css normal zR
"    " Go to Definition
"    autocmd FileType typescript map <F12> <c-]>
"    " Find References
"    autocmd FileType typescript map <F11> :TsuReferences<cr>
"    " Rename symbol
"    autocmd FileType typescript map <F2> :TsuRenameSymbol<cr>
"    " Jump back
"    autocmd FileType typescript map <F10> :TsuGoBack<cr>
"    " Quick Fix
"    autocmd FileType typescript map <F8> :TsuQuickFix<cr>
"    " Show method definition by typing <leader>th in normal mode
"    autocmd FileType typescript nmap <buffer> <Leader>th : <C-u>echo tsuquyomi#hint()<CR>
"    " tell prettier to auto format on save
"    "autocmd bufwritepre *.ts,*.tsx,*.json,*.sjs,*.js PrettierAsync
"    autocmd BufNewFile,BufRead *.sjs set syntax=javascript
"    autocmd BufNewFile,BufRead *.ts highlight typescriptConstFunction guibg='#ff0000'
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction getDocInfo
"    "autocmd BufNewFile,BufRead *.ts syn match typescriptConstFunction "properties\.\(getDocCode\)"
"    "autocmd BufNewFile,BufRead *.ts syn region typescriptConstFunction start=/\v#/ end=/\v#/
"    autocmd BufRead,BufNewFile * setlocal signcolumn=yes
"    autocmd FileType nerdtree setlocal signcolumn=no
"    autocmd BufEnter * call SetTitleFromCwd()
"  augroup END
"endif
"" --------------------------
"" }}}1
